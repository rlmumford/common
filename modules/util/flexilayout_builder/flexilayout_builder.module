<?php

use Drupal\Component\Plugin\Exception\ContextException;
use Drupal\Component\Plugin\Exception\MissingValueContextException;
use Drupal\Core\Config\Entity\ThirdPartySettingsInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Plugin\Context\Context;
use Drupal\Core\Plugin\Context\ContextDefinition;
use Drupal\Core\Plugin\Context\EntityContext;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Url;
use Drupal\ctools_block\Plugin\Block\EntityField;
use Drupal\flexilayout_builder\Entity\FlexibleLayoutBuilderEntityViewDisplay;
use Drupal\flexilayout_builder\Plugin\SectionStorage\OverridesSectionStorage;
use Drupal\layout_builder\Plugin\Block\FieldBlock;
use Drupal\layout_builder\SectionStorageInterface;

/**
 * Implements hook_entity_type_alter().
 */
function flexilayout_builder_entity_type_alter(array &$entity_types) {
  $entity_types['entity_view_display']
    ->setClass(FlexibleLayoutBuilderEntityViewDisplay::class);
}

/**
 * Implements hook_form_entity_view_display_layout_builder_form_alter().
 */
function flexilayout_builder_form_entity_view_display_layout_builder_form_alter(array &$form, FormStateInterface $form_state) {
  $form['actions']['manage_context'] = [
    '#type' => 'link',
    '#title' => new TranslatableMarkup('Manage Context'),
    '#url' => Url::fromRoute('flexilayout_builder.view_context', [
      'section_storage_type' => $form_state->getFormObject()->getSectionStorage()->getStorageType(),
      'section_storage' => $form_state->getFormObject()->getSectionStorage()->getStorageId(),
    ]),
    '#attributes' => [
      'class' => ['use-ajax', 'btn'],
      'data-dialog-type' => 'dialog',
      'data-dialog-renderer' => 'off_canvas',
    ],
  ];
}


/**
 * Implements hook_layout_builder_section_storage().
 *
 * We change the overrides section storage class to store layout wide third
 * party settings.
 */
function flexilayout_builder_layout_builder_section_storage_alter(&$definitions) {
  $definitions['overrides']->setClass(OverridesSectionStorage::class);
}

/**
 * Implements hook_builder_module_implements_alter().
 */
function flexilayout_builder_module_implements_alter(&$implementations, $hook) {
  if ($hook === 'entity_type_alter') {
    // Ensure that this module's implementation of hook_entity_type_alter() runs
    // last so that our entity class is used for entity_view_Display entities.
    $group = $implementations['flexilayout_builder'];
    unset($implementations['flexilayout_builder']);
    $implementations['flexilayout_builder'] = $group;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function flexilayout_builder_form_layout_builder_add_block_alter(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\layout_builder\SectionStorageInterface $section_storage */
  list($section_storage, $delta, $region, $plugin_id) = $form_state->getBuildInfo()['args'];
  $form_state->set('section_storage', $section_storage);
  $form_state->set('flb__component', $form_state->get('layout_builder__component'));
  $form_state->set('flb__uuid', $form_state->get('layout_builder__component')->getUuid());
  $form_state->set('flb__delta', $delta);

  _flexilayout_builder_layout_builder_block_form_alter($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function flexilayout_builder_form_layout_builder_update_block_alter(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\layout_builder\SectionStorageInterface $section_storage */
  list($section_storage, $delta, $region, $uuid) = $form_state->getBuildInfo()['args'];
  $form_state->set('section_storage', $section_storage);
  $form_state->set('flb__component', $section_storage->getSection($delta)->getComponent($uuid));
  $form_state->set('flb__uuid', $uuid);
  $form_state->set('flb__delta', $delta);

  _flexilayout_builder_layout_builder_block_form_alter($form, $form_state);
}

/**
 * Add magical extra things to the block form.
 *
 * Currently supported magic:
 *   - block_classes
 *   - field_label_overrides
 *
 * Still to implement:
 *   - Visibility rules
 *   - Output styles
 */
function _flexilayout_builder_layout_builder_block_form_alter(array &$form, FormStateInterface $form_state) {
  $form['actions']['#weight'] = 1000;
  $form['flexilayout_builder'] = [
    '#type' => 'container',
  ];

  $class = $form_state->get('flb__component') ? $form_state->get('flb__component')->get('class') : '';
  $form['flexilayout_builder']['class'] = [
    '#type' => 'textfield',
    '#title' => t('Block Classes'),
    '#default_value' => $class,
  ];

  /** @var \Drupal\layout_builder\SectionComponent $component */
  if (($component = $form_state->get('flb__component')) && ($component->getPlugin() instanceof EntityField || $component->getPlugin() instanceof FieldBlock)) {
    $form['flexilayout_builder']['field_label_override'] = [
      '#type' => 'checkbox',
      '#title' => t('Use Block Title as Field Label'),
      '#default_value' => $component->get('field_label_override'),
    ];
  }

  array_unshift($form['#submit'], '_flexilayout_builder_layout_builder_block_form_submit');
}

/**
 * Submit.
 */
function _flexilayout_builder_layout_builder_block_form_submit(array $form, FormStateInterface $form_state) {
  $values = $form_state->getValue('flexilayout_builder');
  $component = $form_state->get('section_storage')
    ->getSection($form_state->get('flb__delta'))
    ->getComponent($form_state->get('flb__uuid'));

  $component->set('class', $values['class']);
  $component->set('field_label_override', $values['field_label_override']);
}

/**
 * Implements hook_layout_builder_view_context().
 */
function flexilayout_builder_layout_builder_view_context_alter(array &$contexts, SectionStorageInterface $storage = NULL, $allow_sample = FALSE) {
  if (!($storage instanceof ThirdPartySettingsInterface)) {
    return;
  }

  // Handle the weird case where 'entity' is not set but 'layout_builder.entity' is
  // set as this should all end up as 'entity'.
  // @todo Remove this after https://www.drupal.org/node/3018782.
  if (!empty($contexts['layout_builder.entity']) && empty($contexts['entity'])) {
    $contexts['entity'] = $contexts['layout_builder.entity'];
  }

  $contexts += \Drupal::service('ctools.context_mapper')->getContextValues(
    $storage->getThirdPartySetting('flexilayout_builder', 'static_context', [])
  );

  /** @var \Drupal\ctools\Plugin\RelationshipManager $relationship_manager */
  $relationship_manager = \Drupal::service('plugin.manager.ctools.relationship');
  /** @var \Drupal\Core\Plugin\Context\ContextHandler $context_handler */
  $context_handler = \Drupal::service('context.handler');
  /** @var \Drupal\layout_builder\Entity\SampleEntityGeneratorInterface $sample_generator */
  $sample_generator = \Drupal::service('layout_builder.sample_entity_generator');


  foreach ($storage->getThirdPartySetting('flexilayout_builder', 'relationships', []) as $machine_name => $relationship) {
    try {
      /** @var \Drupal\ctools\Plugin\RelationshipInterface $plugin */
      $plugin = $relationship_manager->createInstance($relationship['plugin'], $relationship['settings'] ?: []);
      $context_handler->applyContextMapping($plugin, $contexts);

      try {
        $context = $plugin->getRelationship();
      }
      catch (TypeError $error) {
        $plugin_definition = $plugin->getPluginDefinition();
        $data_type = $plugin_definition['data_type'];
        $context_definition = new ContextDefinition($data_type, $plugin_definition['label']);
        $context = new Context($context_definition);
      }
      if (!$context->hasContextValue() && $allow_sample) {
        $definition = $context->getContextDefinition();
        if (stripos($definition->getDataType(), 'entity:') === 0) {
          list(,$entity_type_id) = explode(':', $definition->getDataType(), 2);
          $bundle = $entity_type_id;

          if ($bundles = $definition->getConstraint('Bundle')) {
            $bundle = is_array($bundles) ? reset($bundles) : $bundles;
          }
          else {
            // @todo: Select a random bundle.
          }

          $context = EntityContext::fromEntity(
            $sample_generator->get($entity_type_id, $bundle)
          );
        }
      }

      $contexts[$machine_name] = $context;
    }
    catch (MissingValueContextException $e) {
    }
    catch (ContextException $exception) {
    }
  }
}
