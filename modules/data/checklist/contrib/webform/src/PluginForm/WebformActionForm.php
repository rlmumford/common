<?php

namespace Drupal\checklist_webform\PluginForm;

use Drupal\checklist\Entity\ChecklistItemInterface;
use Drupal\checklist\PluginForm\CustomFormObjectClassInterface;
use Drupal\checklist_webform\Form\WebformChecklistItemActionForm;
use Drupal\Component\Plugin\PluginInspectionInterface;
use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
use Drupal\Core\DependencyInjection\DependencySerializationTrait;
use Drupal\Core\Entity\EntityTypeManagerInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Form\SubformState;
use Drupal\Core\Plugin\PluginFormBase;
use Drupal\Core\Render\Element;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * The action form for webform checklist items.
 */
class WebformActionForm extends PluginFormBase implements ContainerInjectionInterface, CustomFormObjectClassInterface {
  use DependencySerializationTrait;

  /**
   * The webform plugin.
   *
   * @var \Drupal\checklist_webform\Plugin\ChecklistItemHandler\Webform
   */
  protected $plugin;

  /**
   * The entity type manager.
   *
   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
   */
  protected EntityTypeManagerInterface $entityTypeManager;

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container) {
    return new static($container->get('entity_type.manager'));
  }

  /**
   * {@inheritdoc}
   */
  public static function getFormObjectClass(PluginInspectionInterface $plugin, string $default_class): string {
    return WebformChecklistItemActionForm::class;
  }

  /**
   * Create the webform action form.
   *
   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
   *   The entity type manager service.
   */
  public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    $this->entityTypeManager = $entity_type_manager;
  }

  /**
   * {@inheritdoc}
   */
  public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
    if (!$form_state->get('webform_submission')) {
      $values = [
        'webform_id' => $this->plugin->getWebform()->id(),
      ];

      /** @var \Drupal\webform\WebformSubmissionInterface $webform_submission */
      $webform_submission = $this->entityTypeManager
        ->getStorage('webform_submission')
        ->create($values);

      // Pass this webform to the webform submission as a direct entity
      // reference. This guarantees overridden properties and settings are
      // maintained. Not sure why the overridden webform is not being correctly
      // passed to the webform submission.
      // @see \Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem::setValue
      if ($this->plugin->getWebform()->isOverridden()) {
        $webform_submission->webform_id->entity = $this->plugin->getWebform();
      }

      $form_state->set('webform_submission', $webform_submission);
    }

    /** @var \Drupal\checklist_webform\Form\WebformChecklistItemActionForm $form_object */
    $form_object = $form_state->getFormObject();
    $sub_form_object = $this->entityTypeManager->getFormObject('webform_submission', 'add');
    $sub_form_object->setEntity($form_state->get('webform_submission'));

    $form_state->set('webform_object', $sub_form_object);
    $form_object->setWebformFormObject($sub_form_object);

    $form['submission'] = [
      '#type' => 'container',
      '#parents' => array_merge($form['#parents'] ?? [], ['submission']),
    ];
    $sub_form_state = SubformState::createForSubform(
      $form['submission'],
      $form,
      $form_state
    );
    $sub_form_state->setFormObject($sub_form_object);
    $form['submission'] = $sub_form_object->buildForm($form['submission'], $sub_form_state);

    unset($form['submission']['#theme']);
    unset($form['submission']['#after_build']);
    unset($form['submission']['actions']);

    $this->wrapWebformObjectCallbacks($form['submission']);

    $form_state->setFormObject($form_object);

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
    parent::validateConfigurationForm($form, $form_state);

    $sub_form_state = SubformState::createForSubform(
      $form['submission'],
      $form,
      $form_state
    );

    // These were copied from the submit button built by webform. They may be
    // dynamic. Write code that copies these from whatever submit button is
    // generated by webform.
    $this->webformObjectValidateForm($form, $sub_form_state);
    $this->webformObjectAutosave($form, $sub_form_state);
    $this->webformObjectComplete($form, $sub_form_state);
  }

  /**
   * {@inheritdoc}
   */
  public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
    $sub_form_state = SubformState::createForSubform(
      $form['submission'],
      $form,
      $form_state
    );

    // These were copied from the submit button built by webform. They may be
    // dynamic. Write code that copies these from whatever submit button is
    // generated by webform.
    $this->webformObjectSubmitForm($form, $sub_form_state);
    $this->webformObjectSave($form, $sub_form_state);
    $this->webformObjectConfirmForm($form, $sub_form_state);

    // @todo Store a reference to the submission.
    if (!$form_state->isRebuilding()) {
      $item = $this->plugin->getItem();
      $item->setComplete(ChecklistItemInterface::METHOD_INTERACTIVE);
      $item->save();
    }
  }

  /**
   * Navigate through the form and wrap any callbacks on the webform object.
   *
   * @param array $form
   *   The form.
   */
  protected function wrapWebformObjectCallbacks(array &$form) {
    $callback_keys = [
      '#process', '#pre_render', '#after_build', '#submit', '#validate',
      '#entity_builders', '#element_validate',
    ];
    foreach ($callback_keys as $key) {
      if (isset($form[$key])) {
        foreach ($form[$key] as &$callback) {
          if (is_string($callback) && substr($callback, 0, 2) === '::') {
            $callback = [$this, 'webformObject' . substr($callback, '2')];
          }
        }
      }
    }

    foreach (Element::children($form) as $child) {
      $this->wrapWebformObjectCallbacks($form[$child]);
    }
  }

  /**
   * Use magic __call to pass some calls onto the webform form object.
   *
   * @param string $name
   *   The method name.
   * @param array $arguments
   *   The arguments.
   *
   * @return mixed
   *   Whatever the webform objects would have returned.
   */
  public function __call(string $name, array $arguments) {
    if (!strtolower(substr($name, 0, 13)) === 'webformobject') {
      throw new \BadMethodCallException('Call to undefined method ' . static::class . "::{$name}()", 0);
    }

    $name = substr($name, 13);
    $webform_object = $arguments[1]->get('webform_object');
    if (!method_exists($webform_object, $name)) {
      throw new \BadMethodCallException('Call to undefined method ' . get_class($webform_object) . "::{$name}()", 0);
    }

    $form_object = $arguments[1]->getFormObject();
    $arguments[1]->setFormObject($webform_object);
    $return = $webform_object->{$name}(...$arguments);
    $arguments[1]->setFormObject($form_object);
    return $return;
  }

}
