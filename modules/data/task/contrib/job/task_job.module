<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;

/**
 * Implements hook_entity_base_field_info().
 */
function task_job_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() == 'task') {
    $fields['job'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(new TranslatableMarkup('Job'))
      ->setDescription(new TranslatableMarkup('The Job'))
      ->setSetting('target_type', 'task_job')
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayConfigurable('form', TRUE);
  }

  return $fields;
}

/**
 * Implements hook_entity_base_field_info_alter().
 */
function task_job_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'task' && isset($fields['checklist'])) {
    $fields['checklist']->setDefaultValueCallback('_task_job_task_checklist_default_value');
  }
}

/**
 * Default value callback to set the checklist value when a task job is set.
 *
 * @param \Drupal\task\Entity\Task $task
 *   The task
 */
function _task_job_task_checklist_default_value(EntityInterface $task) {
  if (!$task->job->isEmpty()) {
    return [
      'id' => 'job',
      'configuration' => [
        'job' => $task->job->target_id,
      ]
    ];
  }

  return NULL;
}

/**
 * Implements hook_typed_data_reference_property_definitions().
 */
function task_job_typed_data_reference_property_definitions(FieldItemListInterface $item_list) {
  $definitions = [];

  $entity = $item_list->getEntity();
  if (
    $item_list->getFieldDefinition()->getName() === 'context' &&
    $item_list->getFieldDefinition()->getTargetEntityTypeId() === 'task' &&
    $entity->hasField('job') &&
    !$entity->get('job')->isEmpty()
  ) {
    /** @var \Drupal\task_job\Entity\Job $job */
    $job = $entity->job->entity;
    foreach ($job->getContextDefinitions() as $key => $definition) {
      $definitions[$key] = $definition->getDataDefinition();
    }
  }

  return $definitions;
}

/**
 * Implements hook_entity_insert().
 */
function task_job_entity_insert(EntityInterface $entity) {
  _task_job_trigger_entity_operation('insert', $entity);
}

/**
 * Implements hook_entity_update().
 */
function task_job_entity_update(EntityInterface $entity) {
  _task_job_trigger_entity_operation('update', $entity);
}

/**
 * Implements hook_entity_delete().
 */
function task_job_entity_delete(EntityInterface $entity) {
  _task_job_trigger_entity_operation('delete', $entity);
}

/**
 * Trigger the entity operation triggers.
 *
 * @param string $op
 *   The operation.
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity.
 */
function _task_job_trigger_entity_operation(string $op, EntityInterface $entity) {
  try {
    $plugin_id = "entity_op:{$entity->getEntityTypeId()}.{$op}";
    /** @var \Drupal\task_job\Plugin\JobTrigger\JobTriggerManagerInterface $manager */
    $manager = \Drupal::service('plugin.manager.task_job.trigger');

    foreach ($manager->getTriggers($plugin_id) as $trigger) {
      $trigger->setContextValue($entity->getEntityTypeId(), $entity);

      if ($op === 'update' && isset($entity->original)) {
        $trigger->setContextValue("original_{$entity->getEntityTypeId()}", $entity);
      }

      if ($task = $trigger->createTask()) {
        $task->save();
      }
    }
  }
  catch (Exception $e) {
    \Drupal::logger('task_job')->error($e->getMessage());
  }
}
