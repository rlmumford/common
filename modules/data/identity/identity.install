<?php

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\identity\Field\BundleFieldDefinition;

/**
 * Implements hook_schema().
 */
function identity_schema() {
  $schema = array();

  $schema['identity_label'] = [
    'description' => 'Stores identity labels.',
    'fields' => [
      'identity' => [
        'description' => 'The identity the label is about.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'label' => [
        'description' => 'Label',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ],
      'context' => [
        'description' => 'Label context',
        'type' => 'varchar',
        'length' => 256,
        'not null' => TRUE,
        'default' => '',
      ]
    ],
    'indexes' => [
      'identity' => ['identity'],
      'context' => ['context'],
    ],
    'unique keys' => [
      'identity_context' => ['identity', 'context'],
    ],
  ];

  return $schema;
}

/**
 * Install works at relationship.
 */
function identity_update_8001() {
  $entity_type_manager = \Drupal::entityTypeManager();
  $entity_type = $entity_type_manager->getDefinition('identity_data');

  $bundle_handler = $entity_type_manager->getHandler($entity_type->id(), 'bundle_plugin');
  $entity_bundle_listener = \Drupal::service('entity_bundle.listener');
  $field_storage_definition_listener = \Drupal::service('field_storage_definition.listener');
  $field_definition_listener = \Drupal::service('field_definition.listener');

  foreach (['works_at'] as $bundle) {
    $entity_bundle_listener->onBundleCreate($bundle, $entity_type->id());
    foreach ($bundle_handler->getFieldDefinitions($bundle) as $definition) {
      $field_storage_definition_listener->onFieldStorageDefinitionCreate($definition);
      $field_definition_listener->onFieldDefinitionCreate($definition);
    }
  }
}

/**
 * Install organization name data.
 */
function identity_update_8002() {
  $entity_type_manager = \Drupal::entityTypeManager();
  $entity_type = $entity_type_manager->getDefinition('identity_data');

  $bundle_handler = $entity_type_manager->getHandler($entity_type->id(), 'bundle_plugin');
  $entity_bundle_listener = \Drupal::service('entity_bundle.listener');
  $field_storage_definition_listener = \Drupal::service('field_storage_definition.listener');
  $field_definition_listener = \Drupal::service('field_definition.listener');

  foreach (['organization_name'] as $bundle) {
    $entity_bundle_listener->onBundleCreate($bundle, $entity_type->id());
    foreach ($bundle_handler->getFieldDefinitions($bundle) as $definition) {
      $field_storage_definition_listener->onFieldStorageDefinitionCreate($definition);
      $field_definition_listener->onFieldDefinitionCreate($definition);
    }
  }
}

/**
 * Install organization name data fields.
 */
function identity_update_8003() {
  $entity_type_manager = \Drupal::entityTypeManager();
  $entity_type = $entity_type_manager->getDefinition('identity_data');

  $bundle_handler = $entity_type_manager->getHandler($entity_type->id(), 'bundle_plugin');
  $entity_bundle_listener = \Drupal::service('entity_bundle.listener');
  $field_storage_definition_listener = \Drupal::service('field_storage_definition.listener');
  $field_definition_listener = \Drupal::service('field_definition.listener');

  foreach (['organization_name'] as $bundle) {
    $entity_bundle_listener->onBundleCreate($bundle, $entity_type->id());
    foreach ($bundle_handler->getFieldDefinitions($bundle) as $definition) {
      $field_storage_definition_listener->onFieldStorageDefinitionCreate($definition);
      $field_definition_listener->onFieldDefinitionCreate($definition);
    }
  }
}

/**
 * Install role data class.
 */
function identity_update_8005() {
  $entity_type_manager = \Drupal::entityTypeManager();
  $entity_type = $entity_type_manager->getDefinition('identity_data');

  $bundle_handler = $entity_type_manager->getHandler($entity_type->id(), 'bundle_plugin');
  $entity_bundle_listener = \Drupal::service('entity_bundle.listener');
  $field_storage_definition_listener = \Drupal::service('field_storage_definition.listener');
  $field_definition_listener = \Drupal::service('field_definition.listener');

  foreach (['role'] as $bundle) {
    $entity_bundle_listener->onBundleCreate($bundle, $entity_type->id());
    foreach ($bundle_handler->getFieldDefinitions($bundle) as $definition) {
      $field_storage_definition_listener->onFieldStorageDefinitionCreate($definition);
      $field_definition_listener->onFieldDefinitionCreate($definition);
    }
  }
}

/**
 * Install the merged_into field.
 */
function identity_update_8006() {
  $updater = \Drupal::entityDefinitionUpdateManager();
  $updater->installFieldStorageDefinition(
    'merged_into',
    'identity',
    'identity',
    BaseFieldDefinition::create('entity_reference')
      ->setSetting('target_type', 'identity')
      ->setLabel(t('Merged Into'))
      ->setDescription(new TranslatableMarkup('Which identity has this been merged into.'))
      ->setDisplayConfigurable('view', TRUE)
  );
}

/**
 * Store generated labels more persistently than in cache.
 */
function identity_update_8007() {
  \Drupal::database()->schema()
    ->createTable('identity_label', [
      'description' => 'Stores identity labels.',
      'fields' => [
        'identity' => [
          'description' => 'The identity the label is about.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ],
        'label' => [
          'description' => 'Label',
          'type' => 'varchar',
          'length' => 128,
          'not null' => TRUE,
          'default' => '',
        ],
        'context' => [
          'description' => 'Label context',
          'type' => 'varchar',
          'length' => 256,
          'not null' => TRUE,
          'default' => '',
        ]
      ],
      'indexes' => [
        'identity' => ['identity'],
        'context' => ['context'],
      ],
      'unique keys' => [
        'identity_context' => ['identity', 'context'],
      ],
    ]);
}
